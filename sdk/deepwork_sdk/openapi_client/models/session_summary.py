# coding: utf-8

"""
    Deep Work Session Tracker

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.interruption_read import InterruptionRead
from typing import Optional, Set
from typing_extensions import Self

class SessionSummary(BaseModel):
    """
    SessionSummary
    """ # noqa: E501
    id: StrictInt
    title: StrictStr
    goal: Optional[StrictStr]
    scheduled_duration: StrictInt
    actual_duration: Optional[StrictInt]
    pauses_count: StrictInt
    status: StrictStr
    start_time: Optional[datetime]
    end_time: Optional[datetime]
    interruptions: Optional[List[InterruptionRead]] = None
    __properties: ClassVar[List[str]] = ["id", "title", "goal", "scheduled_duration", "actual_duration", "pauses_count", "status", "start_time", "end_time", "interruptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SessionSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in interruptions (list)
        _items = []
        if self.interruptions:
            for _item_interruptions in self.interruptions:
                if _item_interruptions:
                    _items.append(_item_interruptions.to_dict())
            _dict['interruptions'] = _items
        # set to None if goal (nullable) is None
        # and model_fields_set contains the field
        if self.goal is None and "goal" in self.model_fields_set:
            _dict['goal'] = None

        # set to None if actual_duration (nullable) is None
        # and model_fields_set contains the field
        if self.actual_duration is None and "actual_duration" in self.model_fields_set:
            _dict['actual_duration'] = None

        # set to None if start_time (nullable) is None
        # and model_fields_set contains the field
        if self.start_time is None and "start_time" in self.model_fields_set:
            _dict['start_time'] = None

        # set to None if end_time (nullable) is None
        # and model_fields_set contains the field
        if self.end_time is None and "end_time" in self.model_fields_set:
            _dict['end_time'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SessionSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "title": obj.get("title"),
            "goal": obj.get("goal"),
            "scheduled_duration": obj.get("scheduled_duration"),
            "actual_duration": obj.get("actual_duration"),
            "pauses_count": obj.get("pauses_count"),
            "status": obj.get("status"),
            "start_time": obj.get("start_time"),
            "end_time": obj.get("end_time"),
            "interruptions": [InterruptionRead.from_dict(_item) for _item in obj["interruptions"]] if obj.get("interruptions") is not None else None
        })
        return _obj


